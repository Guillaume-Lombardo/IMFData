{
    "contents" : "library(httr)\nlibrary(jsonlite)\nlibrary(plyr)\nlibrary(dplyr)\n\n# rm(list=ls())\n# gc()\n\nDataflowMethod <- function(){\n  r <- GET('http://dataservices.imf.org/REST/SDMX_JSON.svc/Dataflow/')\n  r.parsed <- fromJSON(content(r, \"text\"))\n  available.datasets <- r.parsed$Structure$KeyFamilies$KeyFamily\n  available.datasets.id <- available.datasets$`@id`\n  available.datasets.text <- available.datasets$Name$`#text`\n  available.db <- data.frame(\n    DatabaseID = available.datasets.id,\n    DatabaseText = available.datasets.text,\n    stringsAsFactors = FALSE\n  )\n  return(available.db)\n}\n\n## Test\n# availableDB <- DataflowMethod()\n# availableDB$DatabaseID[1]\n\nDataStructureMethod <- function(databaseID, checkquery = FALSE){\n  # return a list with all dimension and legitimate values of each diemnsion\n  if(checkquery){\n    available.datasets <- DataflowMethod()$DatabaseID\n    if (!is.element(databaseID, available.datasets)){\n      return(NULL)\n    }\n  }\n\n  r <- GET(paste0('http://dataservices.imf.org/REST/SDMX_JSON.svc/DataStructure/',databaseID))\n  if(http_status(r)$reason != \"OK\"){\n    return(list())\n  }\n\n  r.parsed <- fromJSON(content(r, \"text\"))\n  dim.code <- r.parsed$Structure$KeyFamilies$KeyFamily$Components$Dimension$`@codelist`\n  dim.code.list<- r.parsed$Structure$CodeLists$CodeList$Code\n  names(dim.code.list) <- r.parsed$Structure$CodeLists$CodeList$`@id`\n  dim.code.list <- dim.code.list[dim.code]\n  dim.code.list <- plyr::llply(dim.code.list,\n                               function(x){\n                                 data.frame(CodeValue = x$`@value`,\n                                            CodeText = x$Description$`#text`,\n                                            stringsAsFactors = FALSE)})\n  return(dim.code.list)\n}\n\n## Test\n# IFS.available.codes <- DataStructureMethod('IFS')\n\nCodeSearch <- function(available.codes, code, searchtext, search.value = TRUE, search.text = TRUE){\n  if( ! is.element(code, names(available.codes))){\n    stop(paste0(\"Code, \", code, \", does not exist.\"))\n  }\n\n  match.index <- c()\n  if(search.value){\n    code.value.match <- grep(searchtext, available.codes[[code]]$CodeValue)\n    match.index <- unique(c(match.index, code.value.match))\n  }\n  if(search.text){\n    code.text.match <- grep(searchtext, available.codes[[code]]$CodeText)\n    match.index <- unique(c(match.index, code.text.match))\n  }\n\n  if(length(match.index) == 0){\n    warning('no match!')\n    return(NULL)\n  }\n  return(available.codes[[code]][match.index,])\n}\n\n## Test\n# IFS.available.codes <- DataStructureMethod('IFS')\n# CodeSearch(IFS.available.codes, 'CLL', 'GDP')\n# CodeSearch(IFS.available.codes, 'CL_INDICATOR_IFS', 'GDP')\n# nrow(CodeSearch(IFS.available.codes, 'CL_INDICATOR_IFS', 'GDP'))\n# nrow(CodeSearch(IFS.available.codes, 'CL_INDICATOR_IFS', 'employ'))\n# nrow(CodeSearch(IFS.available.codes, 'CL_INDICATOR_IFS', 'employaaaaaaaaa'))\n\n\nCompactDataMethod <- function(databaseID, query=NULL, startdate='2001-01-01', enddate='2001-12-31', checkquery = FALSE){\n  if(checkquery){\n    available.datasets <- DataflowMethod()$DatabaseID\n    if (!is.element(databaseID, available.datasets)){\n      stop('databaseID is not exist in API')\n      return(NULL)\n    }\n    acceptedquery <- DataStructureMethod(databaseID)\n    if (length(query) !=0 || length(query) != length(acceptedquery)){\n      stop('query is wrong format')\n      return(NULL)\n    }\n  }\n\n  querystr <- ''\n  if (length(query) > 0){\n    querystr <- paste0(unlist(plyr::llply(query, function(x)(paste0(x, collapse=\"+\")))), collapse=\".\")\n  }\n  r <- GET(paste0('http://dataservices.imf.org/REST/SDMX_JSON.svc/CompactData/',databaseID,'/',querystr,'?startPeriod=',startdate,'&endPeriod=',enddate))\n\n  if(http_status(r)$reason != \"OK\"){\n    stop(paste(unlist(http_status(r))))\n    return(list())\n  }\n  r.parsed <- fromJSON(content(r, \"text\"))\n\n  if(is.null(r.parsed$CompactData$DataSet$Series)){\n    warning(\"No data available\")\n    return(NULL)\n  }\n  return(r.parsed$CompactData$DataSet$Series)\n}\n\n## Test\nIFS.available.codes <- DataStructureMethod('IFS')\ndatabaseID <- 'IFS'\nstartdate='2001-01-01'\nenddate='2016-12-31'\ncheckquery = FALSE\nquery <- list(CL_FREA=\"\", CL_AREA_IFS=\"GR\", CL_INDICATOR_IFS =c(\"NGDP_EUR\",\"NGDP_XDC\"))\nNGDPquery <- CompactDataMethod(databaseID, query, startdate, enddate, checkquery)\nNGDPquery[,1:5]\nNGDPquery$Obs[[1]]\nquery <- list(CL_FREA=\"Q\", CL_AREA_IFS=\"GR\", CL_INDICATOR_IFS =c(\"NGDP_EUR\",\"NGDP_XDC\"))\nNGDPquery <- CompactDataMethod(databaseID, query, startdate, enddate, checkquery)\nNGDPquery[,1:5]\nNGDPquery$Obs[[1]]\nALLGDPCode <- CodeSearch(IFS.available.codes, \"CL_INDICATOR_IFS\", \"GDP\")\nALLGDPCodeValue <- ALLGDPCode$CodeValue\nquery <- list(CL_FREA=\"Q\", CL_AREA_IFS=\"US\", CL_INDICATOR_IFS = \"\")\nNGDPquery <- CompactDataMethod(databaseID, query, startdate, enddate, checkquery)\nNGDPquery[,1:5]\nNGDPquery$Obs[[1]]\nNGDPquery$`@INDICATOR`[grep(\"GDP\", NGDPquery$`@INDICATOR`)]\n# If the return data has only multiple data set, return a data frame\nquery <- list(CL_FREA=\"Q\", CL_AREA_IFS=\"US\", CL_INDICATOR_IFS =ALLGDPCodeValue[5:21]) # Looks like I can have 17 code at once maximum\nNGDPquery <- CompactDataMethod(databaseID, query, startdate, enddate, checkquery)\nNGDPquery[,1:5]\nNGDPquery$Obs[[5]]\n\n## Example US GDP\n# If the return data has only one data set, return a list\nquery <- list(CL_FREA=\"Q\", CL_AREA_IFS=\"US\", CL_INDICATOR_IFS =\"NGDP_SA_AR_XDC\")\nNGDPquery <- CompactDataMethod(databaseID, query, startdate, enddate, checkquery)\nclass(NGDPquery)\nNGDPquery$Obs\n\nDOT.available.codes <- DataStructureMethod('DOT')\nnames(DOT.available.codes)\nDOT.available.codes[[2]]\nCodeSearch(DOT.available.codes, \"CL_AREA_DOT\", \"Taiwan\")\nquery <- list(CL_FREQ = \"\", CL_AREA_DOT=\"F6\", CL_INDICATOR_DOT = \"\", CL_COUNTERPART_AREA_DOT=\"\")\nstartdate='2001-01-01'\nenddate='2016-12-31'\nDOTTXGquery <- CompactDataMethod('DOT', query, startdate, enddate, FALSE)\nclass(DOTTXGquery[1,])\nDOTTXGquery$Obs[1]\n",
    "created" : 1470422308931.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4262060499",
    "id" : "371BA69B",
    "lastKnownWriteTime" : 1470423665,
    "path" : "~/Documents/IMFData_dev/test/testdev.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}