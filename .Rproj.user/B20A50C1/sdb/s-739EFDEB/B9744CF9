{
    "contents" : "## roxygen2::roxygenise()\n\nlibrary(plyr)\nlibrary(dplyr)\nlibrary(httr)\nlibrary(jsonlite)\n\n#' @title Get list of available datasets from API\n#'\n#' @description \\code{DataflowMethod} returns a data frame with availble\n#' datasets\n#'\n#' @return \\code{DataflowMethod} returns a data frame object to describe\n#' available datasets from the API. The data frame includes the following\n#' components\n#' DatabaseID Database ID uses for making API call\n#' DatabaseText Database description.\n#'\n#' @examples\n#' availableDB <- DataflowMethod()\n#' availableDB\n#' availableDB$DatabaseID[1]\n#'\n\nDataflowMethod <- function(){\n  r <- GET('http://dataservices.imf.org/REST/SDMX_JSON.svc/Dataflow/')\n  r.parsed <- fromJSON(content(r, \"text\"))\n  available.datasets <- r.parsed$Structure$KeyFamilies$KeyFamily\n  available.datasets.id <- available.datasets$`@id`\n  available.datasets.text <- available.datasets$Name$`#text`\n  available.db <- data.frame(\n    DatabaseID = available.datasets.id,\n    DatabaseText = available.datasets.text,\n    stringsAsFactors = FALSE\n  )\n  return(available.db)\n}\n\n#' @title Get list of dimension\n#'\n#' @description \\code{DataStructureMethod} get the data structure of dataset\n#'\n#' @param databaseID string. Database ID of the dataset. Obtained from \\code{DataflowMethod}\n#' @param checkquery logical. If true, it will check the database ID is available or not.\n#'\n#' @return \\code{DataStructureMethod} returns a list of data frame to describe available dimensions in the dataset.\n#' The name of the list is the dimension name.\n#' Each element of the list is a data frame with two columns; CodeValue for dimension code and CodeText for dimension description.\n#' @examples\n#' available.codes <- DataStructureMethod('IFS')\n#' names(available.codes)\n#' available.codes[[1]]\nDataStructureMethod <- function(databaseID, checkquery = FALSE){\n  # return a list with all dimension and legitimate values of each diemnsion\n  if(checkquery){\n    available.datasets <- DataflowMethod()$DatabaseID\n    if (!is.element(databaseID, available.datasets)){\n      return(NULL)\n    }\n  }\n\n  r <- GET(paste0('http://dataservices.imf.org/REST/SDMX_JSON.svc/DataStructure/',databaseID))\n  if(http_status(r)$reason != \"OK\"){\n    return(list())\n  }\n\n  r.parsed <- fromJSON(content(r, \"text\"))\n  dim.code <- r.parsed$Structure$KeyFamilies$KeyFamily$Components$Dimension$`@codelist`\n  dim.code.list<- r.parsed$Structure$CodeLists$CodeList$Code\n  names(dim.code.list) <- r.parsed$Structure$CodeLists$CodeList$`@id`\n  dim.code.list <- dim.code.list[dim.code]\n  dim.code.list <- plyr::llply(dim.code.list,\n                               function(x){\n                                 data.frame(CodeValue = x$`@value`,\n                                            CodeText = x$Description$`#text`,\n                                            stringsAsFactors = FALSE)})\n  return(dim.code.list)\n}\n\n#' @title Code Search\n#'\n#' @description \\code{CodeSearch} search\n#'\n#' @param available.codes string. Database ID of the dataset.\n#' @param code string. If true, it will check the database ID is available or not.\n#' @param searchtext string. Database ID of the dataset.\n#' @param search.value logical. If true, it will search only the .\n#' @param search.text logical. If true, it will search .\n#'\n#' @return A list for each dimension.\n#' The name of the list is the dimension name.\n#' Each element of the list is a data frame with two columns; dimension code and dimension text(description).\n#' @examples\n#' IFS.available.codes <- DataStructureMethod('IFS')\n#' names(IFS.available.codes)\n#' IFS.available.codes[[1]]\n#' CodeSearch(IFS.available.codes, 'CLL', 'GDP')\n#' CodeSearch(IFS.available.codes, 'CL_INDICATOR_IFS', 'GDP')\n#' nrow(CodeSearch(IFS.available.codes, 'CL_INDICATOR_IFS', 'GDP'))\n#' nrow(CodeSearch(IFS.available.codes, 'CL_INDICATOR_IFS', 'employ'))\n#' nrow(CodeSearch(IFS.available.codes, 'CL_INDICATOR_IFS', 'employaaaaaaaaa'))\nCodeSearch <- function(available.codes, code, searchtext, search.value = TRUE, search.text = TRUE){\n  if( ! is.element(code, names(available.codes))){\n    stop(paste0(\"Code, \", code, \", does not exist.\"))\n  }\n\n  match.index <- c()\n  if(search.value){\n    code.value.match <- grep(searchtext, available.codes[[code]]$CodeValue)\n    match.index <- unique(c(match.index, code.value.match))\n  }\n  if(search.text){\n    code.text.match <- grep(searchtext, available.codes[[code]]$CodeText)\n    match.index <- unique(c(match.index, code.text.match))\n  }\n\n  if(length(match.index) == 0){\n    warning('no match!')\n    return(NULL)\n  }\n  return(available.codes[[code]][match.index,])\n}\n\n\n#' @title Make query to the database\n#'\n#' @description \\code{CompactDataMethod}\n#'\n#' @param databaseID A character string. Database ID for the dataset. Can be obtained from \\code{DataflowMethod}\n#' @param querry list. A list that contains. If NULL, it will get the result of the first 3000 codes in the database.\n#' @param startdate string. Start date in format of \"YYYY-mm-dd\".\n#' @param enddate string. End date in format of \"YYYY-mm-dd\".\n#' @param checkquery logical. If true, it will check the database ID is available or not.\n#'\n#' @return A list for .\n#' The name of the list is the dimension name.\n#' Each element of the list is a data frame with two columns; dimension code and dimension text(description).\n#' @examples\n#' IFS.available.codes <- DataStructureMethod('IFS')\n#' databaseID <- 'IFS'\n#' startdate='2001-01-01'\n#' enddate='2016-12-31'\n#' checkquery = FALSE\n#' query <- list(CL_FREA=\"\", CL_AREA_IFS=\"GR\", CL_INDICATOR_IFS =c(\"NGDP_EUR\",\"NGDP_XDC\"))\n#' NGDPquery <- CompactDataMethod(databaseID, query, startdate, enddate, checkquery)\n#' NGDPquery[,1:5]\n#' NGDPquery$Obs[[1]]\n#'\n#' query <- list(CL_FREA=\"Q\", CL_AREA_IFS=\"GR\", CL_INDICATOR_IFS =c(\"NGDP_EUR\",\"NGDP_XDC\"))\n#' NGDPquery <- CompactDataMethod(databaseID, query, startdate, enddate, checkquery)\n#' NGDPquery[,1:5]\n#' NGDPquery$Obs[[1]]\n#'\n#' query <- list(CL_FREA=\"Q\", CL_AREA_IFS=\"US\", CL_INDICATOR_IFS = \"\")\n#' NGDPquery <- CompactDataMethod(databaseID, query, startdate, enddate, checkquery)\n#' NGDPquery[,1:5]\n#' NGDPquery$Obs[[1]]\n#' NGDPquery$`@INDICATOR`[grep(\"GDP\", NGDPquery$`@INDICATOR`)]\n#'\n#' # If the return data has only multiple data set, return a data frame\n#' query <- list(CL_FREA=\"Q\", CL_AREA_IFS=\"US\", CL_INDICATOR_IFS =ALLGDPCodeValue[5:21]) # Looks like I can have 17 code at once maximum\n#' NGDPquery <- CompactDataMethod(databaseID, query, startdate, enddate, checkquery)\n#' NGDPquery[,1:5]\n#' NGDPquery$Obs[[5]]\n#'\n#' ## Example US GDP\n#' # If the return data has only one data set, return a list\n#' query <- list(CL_FREA=\"Q\", CL_AREA_IFS=\"US\", CL_INDICATOR_IFS =\"NGDP_SA_AR_XDC\")\n#' NGDPquery <- CompactDataMethod(databaseID, query, startdate, enddate, checkquery)\n#' NGDPquery$Obs\n#'\n#' DOT.available.codes <- DataStructureMethod('DOT')\n#' names(DOT.available.codes)\n#' DOT.available.codes[[2]]\n#' CodeSearch(DOT.available.codes, \"CL_AREA_DOT\", \"Taiwan\")\n#' query <- list(CL_FREQ = \"\", CL_AREA_DOT=\"F6\", CL_INDICATOR_DOT = \"\", CL_COUNTERPART_AREA_DOT=\"\")\n#' DOTTXGquery <- CompactDataMethod('DOT', query, startdate, enddate, FALSE)\n#' class(DOTTXGquery[1,])\n#' DOTTXGquery$Obs[1]\n\nCompactDataMethod <- function(databaseID, query=NULL, startdate='2001-01-01', enddate='2001-12-31', checkquery = FALSE){\n  if(checkquery){\n    available.datasets <- DataflowMethod()$DatabaseID\n    if (!is.element(databaseID, available.datasets)){\n      stop('databaseID is not exist in API')\n      return(NULL)\n    }\n    acceptedquery <- DataStructureMethod(databaseID)\n    if (length(query) !=0 || length(query) != length(acceptedquery)){\n      stop('query is wrong format')\n      return(NULL)\n    }\n  }\n\n  querystr <- ''\n  if (length(query) > 0){\n    querystr <- paste0(unlist(plyr::llply(query, function(x)(paste0(x, collapse=\"+\")))), collapse=\".\")\n  }\n  r <- GET(paste0('http://dataservices.imf.org/REST/SDMX_JSON.svc/CompactData/',databaseID,'/',querystr,'?startPeriod=',startdate,'&endPeriod=',enddate))\n\n  if(http_status(r)$reason != \"OK\"){\n    stop(paste(unlist(http_status(r))))\n    return(list())\n  }\n  r.parsed <- fromJSON(content(r, \"text\"))\n\n  if(is.null(r.parsed$CompactData$DataSet$Series)){\n    warning(\"No data available\")\n    return(NULL)\n  }\n  return(r.parsed$CompactData$DataSet$Series)\n}\n\n## Test\n# IFS.available.codes <- DataStructureMethod('IFS')\n# databaseID <- 'IFS'\n# startdate='2001-01-01'\n# enddate='2016-12-31'\n# checkquery = FALSE\n# query <- list(CL_FREA=\"\", CL_AREA_IFS=\"GR\", CL_INDICATOR_IFS =c(\"NGDP_EUR\",\"NGDP_XDC\"))\n# NGDPquery <- CompactDataMethod(databaseID, query, startdate, enddate, checkquery)\n# NGDPquery[,1:5]\n# NGDPquery$Obs[[1]]\n# query <- list(CL_FREA=\"Q\", CL_AREA_IFS=\"GR\", CL_INDICATOR_IFS =c(\"NGDP_EUR\",\"NGDP_XDC\"))\n# NGDPquery <- CompactDataMethod(databaseID, query, startdate, enddate, checkquery)\n# NGDPquery[,1:5]\n# NGDPquery$Obs[[1]]\n# ALLGDPCode <- CodeSearch(IFS.available.codes, \"CL_INDICATOR_IFS\", \"GDP\")\n# ALLGDPCodeValue <- ALLGDPCode$CodeValue\n# query <- list(CL_FREA=\"Q\", CL_AREA_IFS=\"US\", CL_INDICATOR_IFS = \"\")\n# NGDPquery <- CompactDataMethod(databaseID, query, startdate, enddate, checkquery)\n# NGDPquery[,1:5]\n# NGDPquery$Obs[[1]]\n# NGDPquery$`@INDICATOR`[grep(\"GDP\", NGDPquery$`@INDICATOR`)]\n# # If the return data has only multiple data set, return a data frame\n# query <- list(CL_FREA=\"Q\", CL_AREA_IFS=\"US\", CL_INDICATOR_IFS =ALLGDPCodeValue[5:21]) # Looks like I can have 17 code at once maximum\n# NGDPquery <- CompactDataMethod(databaseID, query, startdate, enddate, checkquery)\n# NGDPquery[,1:5]\n# NGDPquery$Obs[[5]]\n#\n# ## Example US GDP\n# # If the return data has only one data set, return a list\n# query <- list(CL_FREA=\"Q\", CL_AREA_IFS=\"US\", CL_INDICATOR_IFS =\"NGDP_SA_AR_XDC\")\n# # querystr <- paste0(unlist(plyr::llply(query, function(x)(paste0(x, collapse=\"+\")))), collapse=\".\")\n# NGDPquery <- CompactDataMethod(databaseID, query, startdate, enddate, checkquery)\n# class(NGDPquery)\n# NGDPquery$Obs\n#\n# DOT.available.codes <- DataStructureMethod('DOT')\n# names(DOT.available.codes)\n# DOT.available.codes[[2]]\n# CodeSearch(DOT.available.codes, \"CL_AREA_DOT\", \"Taiwan\")\n# query <- list(CL_FREQ = \"\", CL_AREA_DOT=\"F6\", CL_INDICATOR_DOT = \"\", CL_COUNTERPART_AREA_DOT=\"\")\n# startdate='2001-01-01'\n# enddate='2016-12-31'\n# DOTTXGquery <- CompactDataMethod('DOT', query, startdate, enddate, FALSE)\n# class(DOTTXGquery[1,])\n# DOTTXGquery$Obs[1]\n",
    "created" : 1470423679699.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2413152645",
    "id" : "B9744CF9",
    "lastKnownWriteTime" : 1470767194,
    "path" : "~/Documents/IMFData/R/IMFData.R",
    "project_path" : "R/IMFData.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}